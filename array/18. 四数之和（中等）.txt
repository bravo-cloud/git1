题目：
给定一个数组，要求在这个数组中找出 4 个数之和为 0 的所有组合。



代码：
func fourSum(nums []int, target int) [][]int {
    sort.Ints(nums)
    n := len(nums)
    var res [][]int

    for i := 0; i < n-1; i++ {
        if i > 0 && nums[i] == nums[i-1] { // 去重1
            continue
        }
        for j := i + 1; j < n; j++ {
            if j > i+1 && nums[j] == nums[j-1] { // 去重2    // 注意条件：j>i+1 与 i>0 相同都是为了排除第一个相同数
                continue
            }
            head, tail := j+1, n-1
            for head < tail {
                sum := nums[i] + nums[j] + nums[head] + nums[tail]
                switch {
                case sum < target: // 向后走
                    head++
                case sum > target: // 向前走
                    tail--
                case sum == target: // 向前向后走
                    res = append(res, []int{nums[i], nums[j], nums[head], nums[tail]})
                    // 去重3：注意 for 循环条件的判断，避开死循环
                    for head < tail && nums[head] == nums[head+1] {
                        head++
                    }
                    for head < tail && nums[tail] == nums[tail-1] {
                        tail--
                    }
                    head++
                    tail--
                }
            }
        }
    }
    return res
}
