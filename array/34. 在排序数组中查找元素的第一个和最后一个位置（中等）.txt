题目：
给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。
如果数组中不存在目标值 target，返回 [-1, -1]。



示例 1：
输入：nums = [5,7,7,8,8,10], target = 8
输出：[3,4]

示例 2：
输入：nums = [5,7,7,8,8,10], target = 6
输出：[-1,-1]

示例 3：
输入：nums = [], target = 0
输出：[-1,-1]


代码：
func searchRange(nums []int, target int) []int {
    return []int{searchFirstEqualElement(nums, target), searchLastEqualElement(nums, target)}
}

// 二分查找第一个与 target 相等的元素，时间复杂度 O(logn)
func searchFirstEqualElement(nums []int, target int) int {
    l, r := 0, len(nums)-1
    for l <= r{
        mid := (l + r) / 2
        switch {
        case target > nums[mid]:
            l = mid + 1
        case target < nums[mid]:
            r = mid -1
        default:
            if mid == 0 || target != nums[mid -1]{
                return mid
            }
            r = mid -1
        }
    }
    return -1
}

// 二分查找最后一个与 target 相等的元素，时间复杂度 O(logn)
func searchLastEqualElement(nums []int, target int) int {
    l, r := 0, len(nums)-1
    for l <= r{
        mid := (l + r) / 2
        switch {
        case target > nums[mid]:
            l = mid + 1
        case target < nums[mid]:
            r = mid -1
        default:
            if mid == len(nums)-1 || target != nums[mid + 1]{
                return mid
            }
            l = mid + 1
        }
    }
    return -1
}

// 二分查找第一个大于等于 target 的元素，时间复杂度 O(logn)
func searchFirstGreaterElement(nums []int, target int) int {
    l, r := 0, len(nums)-1
    for l <= r{
        mid := (l + r) / 2
        if nums[mid] >= target{
            if mid == 0 || nums[mid] < target{
                return mid
            }
            r = mid - 1
        }else {
            l = mid + 1
        }
    }
    return -1
}

// 二分查找最后一个小于等于 target 的元素，时间复杂度 O(logn)
func searchLastLessElement(nums []int, target int) int {
    l, r := 0, len(nums)-1
    for l <= r{
        mid := (l + r) / 2
        if nums[mid] <= target{
            if mid == len(nums)-1 || nums[mid+1] > target{
                return mid
            }
            l = mid + 1
        }else {
            r = mid - 1
        }
    }
    return -1
}